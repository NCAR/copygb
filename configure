#!/bin/sh

#
# Name of this script
SCRIPT=configure

arg1=$1


#
# Process any command line arguments
args=`getopt :d $*`
if [ $? != 0 ] ; then
    echo 'Usage: $0 [-d]'
    exit 64 # EX_USAGE
fi
set -- $args
for arg ; do
    case "$arg" in
        -d) DEBUG=1; echo 'Compiling with DEBUG option'; shift;;
    esac
done

# =============================================================================
# If NETCDF is not set, look for legacy locations:
# =============================================================================
if [ -z "$NETCDF" ] ; then
  echo $SCRIPT ": NETCDF environment variable not set"
# User supplied
  if [ -d ./netcdf_links ] ; then
    NETCDF=`pwd`/netcdf_links
# System default
  elif [ -d /usr/local/netcdf ] ; then
    NETCDF=/usr/local/netcdf
  else
    echo "Could not find netCDF libraries"
    echo ""
    exit 2   #ERROR
  fi
fi

echo "Will use NETCDF in:           " $NETCDF
#
# NETCDF 3.6.2 and greater there might be a second library, libnetcdff.a 
USENETCDFF=""  
if [ -f "$NETCDF/lib/libnetcdff.a" -o -f "$NETCDF/lib/libnetcdff.so" ] ; then
  USENETCDFF="-lnetcdff"
fi

# Find location of NCEPLIBS
if [ -z "$NCEPLIBS_DIR" ] ; then
  echo "ERROR: You must define the location of the NCEP libraries (NCEPLIBS_DIR)"
  exit 1
else
  echo "Will use NCEPlibs in:         " $NCEPLIBS_DIR
fi

# Legacy variables; accept with or without underscores
if [ ! -z "$JASPERLIB" ]; then
  export JASPER_LIB=$JASPERLIB
fi
if [ ! -z "$JASPERINC" ]; then
  export JASPER_INC=$JASPERINC
fi

# Find location of JASPER libs and includes (for GRIB2 support)
if [ -z "$NOGRIB2" ]; then
  if [ -z "$JASPER_LIB" ] || [ -z "$JASPER_INC" ]; then
    if [ -z "$JASPER" ]; then
      echo "ERROR: You must define the locations of JASPER library (JASPER_LIB) and include (JASPER_INC) files"
      echo "       to compile UPP with GRIB2 support"
      echo ""
      echo "       To disable GRIB2 support, set the environment variable NOGRIB2 (NOT RECOMMENDED)"
      exit 1
    else
      export JASPER_LIB="$JASPER/lib"
      export JASPER_INC="$JASPER/include"
    fi
  else
    echo "Will use JASPER libraries in: " $JASPER_LIB
    echo "Will use JASPER includes in:  " $JASPER_INC
  fi
  if [ ! -d "$JASPER_LIB" ] || [ ! -d "$JASPER_INC" ]; then
    echo "ERROR: Check your JASPER location; one or both of these paths does not exist:"
    echo $JASPER_LIB
    echo $JASPER_INC
    exit 2
  fi
fi


#
# if the uname command exists, give it a shot and see if
# we can narrow the choices; otherwise, spam 'em
os="ARCH"
mach="ARCH"
type uname > /dev/null
if [ $? -eq 0 ] ; then
    os=`uname`
    if [ "$os" = "AIX" -o "$os" = "IRIX" -o "$os" = "IRIX64" -o "$os" = "SunOS" -o "$os" = "HP-UX"  -o "$os" = "Darwin" ] ; then
      mach="ARCH"
    else
      if [ "$os" = "OSF1" -o "$os" = "Linux" -o "$os" = "UNICOS/mp" -o "$os" = "UNIX_System_V" ] ; then
        mach=`uname -m`
      else
        os="ARCH"
        mach="ARCH"
      fi
    fi
fi

#
# Add directory support for build
pwd=`pwd`
if [ ! -e ./bin ] ; then
   echo "$SCRIPT: making ./bin"
   mkdir ./bin
fi

BINDIR=${pwd}/bin
echo "bindir " ${BINDIR}

if [ ! -e ./include ] ; then
   echo "$SCRIPT: making ./include"
   mkdir ./include
fi
INCMOD=${pwd}/include
echo "incmod " ${INCMOD}

if [ ! -e ./lib ] ; then
   echo "$SCRIPT: making ./lib"
   mkdir ./lib
fi
LIBDIR=${pwd}/lib
echo "libdir " ${LIBDIR}

#
# See if the env var DEBUG is set (overriding any arguments passed in)
if [ ! -z "$DEBUG" ] ; then
    DEBUG=1
fi

#
# so proceed with configuration 
perl arch/Config.pl  -nceplibs=$NCEPLIBS_DIR                          \
                     -jasperlib=$JASPER_LIB -jasperinc=$JASPER_INC    \
                     -netcdf=$NETCDF -USENETCDFF=$USENETCDFF          \
                     -os=$os -mach=$mach                              \
                     -bindir=$BINDIR -incmod=$INCMOD -libdir=$LIBDIR  \
                     -debug=$DEBUG

if [ ! -z "$NOGRIB2" ]; then
  echo "Variable NOGRIB2 is set; compiling UPP without GRIB2 support"
  echo ""
  echo "WARNING WARNING WARNING"
  echo "  GRIB1 support for UPP will be deprecated in a future release"
  echo "  Compiling for GRIB2 is strongly recommended"
  echo "WARNING WARNING WARNING"
  echo ""
fi
